{"version":3,"sources":["img/SageSalon105.png","img/sage-logo.png","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","textAlign","socialLink","textDecoration","socialIcons","fontSize","margin","color","infoBorder","marginRight","paddingRight","borderRight","Footer","classes","className","Container","fixed","Grid","container","spacing","item","xs","href","rel","target","icon","faFacebook","faInstagram","salonImg","height","sageLogo","logoWrapper","marginTop","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,+NCSrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,UAAW,UAEbC,WAAY,CACVC,eAAgB,QAElBC,YAAa,CACXC,SAAU,OACVC,OAAQ,MACRC,MAAO,0BAETC,WAAY,CACVC,YAAa,OACbC,aAAc,OACdC,YAAa,yBA+CFC,MA3Cf,WACE,IAAMC,EAAUjB,IA0BhB,OACE,yBAAKkB,UAAWD,EAAQd,MACtB,kBAACgB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,mBA7BV,WACE,OACE,6BACE,uBAAGP,UAAWD,EAAQX,WAAYoB,KAAK,wCAAwCC,IAAI,sBAAsBC,OAAO,UAC9G,kBAAC,IAAD,CAAiBV,UAAWD,EAAQT,YAAaqB,KAAMC,OAEzD,uBAAGZ,UAAWD,EAAQX,WAAYoB,KAAK,yCAAyCC,IAAI,sBAAsBC,OAAO,UAC/G,kBAAC,IAAD,CAAiBV,UAAWD,EAAQT,YAAaqB,KAAME,UAsBrD,OAEF,kBAACV,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,mBAlBV,WACE,OACE,6BACE,uBAAGC,KAAK,gCAAgCR,UAAWD,EAAQL,YAA3D,0BACA,uBAAGc,KAAK,mBAAmBR,UAAWD,EAAQL,YAA9C,gBACA,uBAAGc,KAAK,uMAAuMC,IAAI,sBAAsBC,OAAO,UAAhP,mDAaI,WCtDN5B,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,UAAW,UAEb2B,SAAU,CACRC,OAAQ,UAEVC,SAAU,CACRD,OAAQ,SAEVE,YAAa,CACXC,UAAW,YAwBAC,MApBf,WACE,IAAMpB,EAAUjB,IAEhB,OACE,yBAAKkB,UAAWD,EAAQd,MACtB,kBAACgB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMH,UAAWD,EAAQkB,YAAaX,MAAI,EAACC,GAAI,IAC7C,yBAAKa,IAAKJ,IAAUhB,UAAWD,EAAQiB,SAAUK,IAAI,UAEvD,kBAAClB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,yBAAKa,IAAKN,IAAUd,UAAWD,EAAQe,SAAUO,IAAI,WAGzD,kBAAC,EAAD,SC5BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.62ea0016.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SageSalon105.fa9b0a97.png\";","module.exports = __webpack_public_path__ + \"static/media/sage-logo.50df172f.png\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFacebook, faInstagram } from '@fortawesome/free-brands-svg-icons'\n\nimport '../App.css';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    textAlign: 'center'\n  },\n  socialLink: {\n    textDecoration: 'none'\n  },\n  socialIcons: {\n    fontSize: '40px',\n    margin: '5px',\n    color: 'rgba(178, 186, 165, 1)'\n  },\n  infoBorder: {\n    marginRight: '10px',\n    paddingRight: '10px',\n    borderRight: '1px solid #000000'\n  },\n}));\n\nfunction Footer() {\n  const classes = useStyles();\n\n  function FooterSocial() {\n    return(\n      <div>\n        <a className={classes.socialLink} href=\"https://www.facebook.com/SageSalon19/\" rel=\"noopener noreferrer\" target=\"_blank\">\n          <FontAwesomeIcon className={classes.socialIcons} icon={faFacebook} />\n        </a>\n        <a className={classes.socialLink} href=\"https://www.instagram.com/sagesalon19/\" rel=\"noopener noreferrer\" target=\"_blank\">\n          <FontAwesomeIcon className={classes.socialIcons} icon={faInstagram} />\n        </a>\n      </div>\n\n    )\n  }\n\n  function FooterInfo() {\n    return(\n      <div>\n        <a href='mailto:sagesalon730@gmail.com' className={classes.infoBorder}>sagesalon730@gmail.com</a>\n        <a href='tel:864-349-1309' className={classes.infoBorder}>864-349-1309</a>\n        <a href='https://www.google.com/maps/place/730+S+Pleasantburg+Dr+Suite+M,+Greenville,+SC+29607/data=!4m2!3m1!1s0x88582fc1d5fa241d:0x8955f0c0780fa530?sa=X&ved=2ahUKEwjxmaC9u4HlAhUOCKwKHcMJD-EQ8gEwAHoECAoQAQ' rel=\"noopener noreferrer\" target='_blank'>730 S Pleasantburg Dr Suite M Greenville, SC</a>\n      </div>\n    )\n  }\n\n  return (\n    <div className={classes.root}>\n      <Container fixed>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <FooterSocial />\n          </Grid>\n          <Grid item xs={12}>\n            <FooterInfo />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nimport salonImg from '../img/SageSalon105.png';\nimport sageLogo from '../img/sage-logo.png'\nimport '../App.css';\nimport Footer from './Footer.js';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    textAlign: 'center'\n  },\n  salonImg: {\n    height: '60vmin'\n  },\n  sageLogo: {\n    height: '150px'\n  },\n  logoWrapper: {\n    marginTop: '30px'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Container fixed>\n        <Grid container spacing={3}>\n          <Grid className={classes.logoWrapper} item xs={12}>\n            <img src={sageLogo} className={classes.sageLogo} alt=\"logo\" />\n          </Grid>\n          <Grid item xs={12}>\n            <img src={salonImg} className={classes.salonImg} alt=\"logo\" />\n          </Grid>\n        </Grid>\n        <Footer />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}